{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Elixir",
  "scopeName": "source.ex",
  "patterns": [
      {
          "include": "#interpolated_ex"
      },
      {
          "include": "#constant"
      },
      {
          "include": "#comment"
      },
      {
          "include": "#string"
      },
      {
          "include": "#entity"
      },
      {
          "include": "#invalid"
      },
      {
          "include": "#keyword"
      },
      {
          "include": "#meta"
      },
      {
          "include": "#operator"
      },
      {
          "include": "#punctuation"
      },
      {
          "include": "#storage"
      },
      {
          "include": "#support"
      },
      {
          "include": "#type"
      },
      {
          "include": "#variable"
      }
  ],
  "repository": {
      "escaped_char": {
          "patterns": [
              {
                  "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
                  "name": "constant.character.escape.ex"
              }
          ]
      },
      "interpolated_ex": {
          "patterns": [
              {
                  "captures": {
                      "0": {
                          "name": "punctuation.section.embedded.ex"
                      },
                      "1": {
                          "name": "source.ex.embedded.source.empty"
                      }
                  },
                  "match": "#\\{(\\})",
                  "name": "source.ex.embedded.source"
              },
              {
                  "begin": "#\\{",
                  "captures": {
                      "0": {
                          "name": "punctuation.section.embedded.ex"
                      }
                  },
                  "end": "\\}",
                  "name": "source.ex.embedded.source",
                  "patterns": []
              }
          ]
      },
      "nest_brackets": {
          "begin": "\\[",
          "end": "\\]",
          "captures": {
              "0": {
                  "name": "punctuation.section.scope.ex"
              }
          },
          "patterns": [
              {
                  "include": "#nest_brackets"
              }
          ]
      },
      "nest_curly": {
          "begin": "\\{",
          "end": "\\}",
          "captures": {
              "0": {
                  "name": "punctuation.section.scope.ex"
              }
          },
          "patterns": [
              {
                  "include": "#nest_curly"
              }
          ]
      },
      "nest_curly_and_self": {
          "patterns": [
              {
                  "begin": "\\{",
                  "end": "\\}",
                  "captures": {
                      "0": {
                          "name": "punctuation.section.scope.ex"
                      }
                  },
                  "patterns": [
                      {
                          "include": "#nest_curly_and_self"
                      }
                  ]
              },
              {
                  "include": "$self"
              }
          ]
      },
      "nest_ltgt": {
          "begin": "\\<",
          "end": "\\>",
          "captures": {
              "0": {
                  "name": "punctuation.section.scope.ex"
              }
          },
          "patterns": [
              {
                  "include": "#nest_ltgt"
              }
          ]
      },
      "regex_sub": {
          "name": "string.interpolated.regexp.ex",
          "patterns": [
              {
                  "include": "#interoplated_ex"
              },
              {
                  "include": "#escaped_char"
              },
              {
                  "name": "string.regexp.arbitrary-repitition.ex",
                  "match": "(\\{)\\d+(,\\d+)?(\\})",
                  "captures": {
                      "1": {
                          "name": "punctuation.definition.arbitrary-repitition.ex"
                      },
                      "3": {
                          "name": "punctuation.definition.arbitrary-repitition.ex"
                      }
                  }
              },
              {
                  "name": "string.regexp.character-class.ex",
                  "begin": "\\[(?:\\^?\\])?",
                  "end": "\\]",
                  "captures": {
                      "0": {
                          "name": "punctuation.definition.character-class.ex"
                      }
                  },
                  "patterns": [
                      {
                          "include": "#escaped_char"
                      }
                  ]
              },
              {
                  "name": "string.regexp.group.ex",
                  "begin": "\\(",
                  "end": "\\)",
                  "captures": {
                      "0": {
                          "name": "punctuation.definition.group.ex"
                      }
                  },
                  "patterns": [
                      {
                          "include": "#regex_sub"
                      }
                  ]
              },
              {
                  "name": "comment.line.number-sign.ex",
                  "comment": "We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.",
                  "begin": "(?<=^|\\s)(#)\\s(?=[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$)",
                  "end": "$\\n?",
                  "beginCaptures": {
                      "1": {
                          "name": "punctuation.definition.comment.ex"
                      }
                  },
                  "endCaptures": {
                      "0": {
                          "name": "punctuation.definition.comment.ex"
                      }
                  }
              }
          ]
      },
      "comment": {
          "patterns": [
              {
                  "comment": "@doc with interpolated heredocs",
                  "name": "comment.documentation.heredoc.ex",
                  "begin": "@(module|type)?doc (~s)?\"\"\"",
                  "end": "\\s*\"\"\"",
                  "patterns": [
                      {
                          "include": "#interoplated_ex"
                      },
                      {
                          "include": "#escaped_char"
                      }
                  ]
              },
              {
                  "comment": "@doc with interpolated single quoted heredocs",
                  "name": "comment.documentation.heredoc.ex",
                  "begin": "@(module|type)?doc ~s'''",
                  "end": "\\s*'''",
                  "patterns": [
                      {
                          "include": "#interoplated_ex"
                      },
                      {
                          "include": "#escaped_char"
                      }
                  ]
              },
              {
                  "comment": "@doc with heredocs is treated as documentation",
                  "name": "comment.documentation.heredoc.ex",
                  "begin": "@(module|type)?doc ~S\"\"\"",
                  "end": "\\s*\"\"\"",
                  "patterns": [
                      {
                          "include": "#escaped_char"
                      }
                  ]
              },
              {
                  "comment": "@doc with heredocs is treated as documentation",
                  "name": "comment.documentation.heredoc.ex",
                  "begin": "@(module|type)?doc ~S'''",
                  "end": "\\s*'''",
                  "patterns": [
                      {
                          "include": "#escaped_char"
                      }
                  ]
              },
              {
                  "comment": "@doc false is treated as documentation",
                  "name": "comment.documentation.false",
                  "match": "@(module|type)?doc false"
              },
              {
                  "comment": "@doc with string is treated as documentation",
                  "begin": "@(module|type)?doc \"",
                  "end": "\"",
                  "name": "comment.documentation.string",
                  "patterns": [
                      {
                          "include": "#interoplated_ex"
                      },
                      {
                          "include": "#escaped_char"
                      }
                  ]
              },
              {
                  "name": "comment.line.number-sign.ex",
                  "begin": "#",
                  "end": "\\n",
                  "beginCaptures": {
                      "0": {
                          "name": "punctuation.definition.comment.ex"
                      }
                  }
              },
              {
                  "match": "\\b_([\\w]+[?!]?)",
                  "name": "comment.unused.ex"
              },
              {
                  "match": "\\b_\\b",
                  "name": "comment.wildcard.ex"
              }
          ]
      },
      "constant": {
          "patterns": [
              {
                  "name": "constant.language.ex",
                  "match": "\\b(nil|true|false)\\b(?![?!])"
              },
              {
                  "name": "constant.numeric.ex",
                  "comment": "matches questionmark-letters.\n\nexamples (1st alternation = hex):\n?\\x1     ?\\x61\n\nexamples (2nd alternation = octal):\n?\\0      ?\\07     ?\\017\n\nexamples (3rd alternation = escaped):\n?\\n      ?\\b\n\nexamples (4th alternation = meta-ctrl):\n?\\C-a    ?\\M-a    ?\\C-\\M-\\C-\\M-a\n\nexamples (4th alternation = normal):\n?a       ?A       ?0\n?*       ?\"       ?(\n?.       ?#\n\n\nthe negative lookbehind prevents against matching\np(42.tainted?)",
                  "match": "(?<!\\w)\\?(\\\\(x\\h{1,2}(?!\\h)\\b|0[0-7]{0,2}(?![0-7])\\b|[^x0MC])|(\\\\[MC]-)+\\w|[^\\s\\\\])"
              },
              {
                  "name": "constant.numeric.ex",
                  "match": "\\b(0[xX]\\h(?>_?\\h)*|\\d(?>_?\\d)*(\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?([eE][-+]?\\d(?>_?\\d)*)?|0[bB][01]+)\\b"
              },
              {
                  "comment": "symbols",
                  "captures": {
                      "1": {
                          "name": "punctuation.definition.constant.ex"
                      }
                  },
                  "match": "(?<!:)(:)(?>[a-zA-Z_][\\w@]*(?>[?!]|=(?![>=]))?|\\<\\>|===?|!==?|<<>>|<<<|>>>|~~~|::|<\\-|\\|>|=>|~|~=|=|/|\\\\\\\\|\\*\\*?|\\.\\.?\\.?|>=?|<=?|&&?&?|\\+\\+?|\\-\\-?|\\|\\|?\\|?|\\!|@|\\%?\\{\\}|%|\\[\\]|\\^(\\^\\^)?)",
                  "name": "constant.other.symbol.ex"
              }
          ]
      },
      "entity": {
          "patterns": [
              {
                  "name": "entity.name.function.ex",
                  "match": "[a-zA-Z0-9_?!]+(?=[(])"
              },
              {
                  "captures": {
                      "1": {
                          "name": "keyword.control.module.ex"
                      },
                      "2": {
                          "name": "entity.name.type.module.ex"
                      }
                  },
                  "match": "^\\s*(defmodule)\\s+(([A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*)"
              }
          ]
      },
      "keyword": {
          "patterns": [
                {
                    "comment": "Function without parameters",
                    "match": "\\b(defp?|defmacrop?)\\b\\s*([_$a-z][$\\w]*[!?]?)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.ex"
                        },
                        "2": {
                            "name": "entity.name.function.ex"
                        }
                    }
                },
                {
                    "name": "keyword.control.ex",
                    "match": "(?<!\\.)\\b(do|end|case|bc|lc|for|if|cond|with|unless|try|receive|fn|defmodule|defprotocol|defimpl|defrecordp?|defstruct|defdelegate|defcallback|defexception|defoverridable|defguardp?|exit|after|rescue|catch|else|raise|throw|quote|unquote|super|when|and|or|not|in)\\b(?![?!])"
                },
                {
                    "comment": "typespec Hx",
                    "match": "\\s*(::)\\s*([%\\w{}:.,|]+(?:\\s*\\|\\s*[^\\s]+)*)",
                    "captures": {
                        "1": {
                            "name": "constant.language.symbol.ex"
                        },
                        "2": {
                            "name": "entity.name.type.ex"
                        }
                    }
                },
                {
                  "name": "keyword.control.ex",
                  "match": "(?<!\\.)\\b(test)\\b(?![?!])"
              },
              {
                  "name": "keyword.other.special-method.ex",
                  "match": "(?<!\\.)\\b(alias|require|import|use)\\b(?![?!])"
              },

              {
                  "comment": " as above, just doesn't need a 'end' and does a logic operation",
                  "name": "keyword.operator.ex",
                  "match": "(?<!\\.)\\b(and|not|or|when|xor|in|inlist|inbits)\\b"
              }
          ]
      },
      "operator": {
          "patterns": [
              {
                  "match": "->",
                  "name": "keyword.operator.arrow.ex"
              },
              {
                  "match": "=>",
                  "name": "keyword.operator.big-arrow.ex"
              },
              {
                  "match": "\\|>",
                  "name": "keyword.operator.pipe.ex"
              },
              {
                  "match": "=",
                  "name": "keyword.operator.assignment.ex"
              },
              {
                  "match": "(\\|\\|\\||&&&|\\^\\^\\^|<<<|>>>|~~~)",
                  "name": "keyword.operator.bitwise.ex"
              },
              {
                  "comment": "matches: | ++ -- ** \\ <- <> << >> :: .. |> => -> <|> <~> <~ <<~ ~> ~>>",
                  "match": "\\+\\+|\\-\\-|\\*\\*|\\\\\\\\|\\<\\-|<\\<\\~|\\<\\>|\\<\\<|\\>\\>|\\:\\:|\\.\\.|\\|>|=>|<\\|\\>|<~>|->|~>>|~>|<~|(?<!\\|)\\|(?!\\|)",
                  "name": "keyword.operator.other.ex"
              },
              {
                  "match": "===?|!==?|<=?|>=?|=~",
                  "name": "keyword.operator.comparison.ex"
              },
              {
                  "match": "(?<=[ \\t])!+|\\bnot\\b|&&|\\band\\b|\\|\\||\\bor\\b|\\bxor\\b",
                  "name": "keyword.operator.logical.ex"
              },
              {
                  "match": "(\\*|\\+|\\-|/)",
                  "name": "keyword.operator.arithmetic.ex"
              }
          ]
      },
      "punctuation": {
          "patterns": [
              {
                  "match": "\\;",
                  "name": "punctuation.separator.statement.ex"
              },
              {
                  "match": ",",
                  "name": "punctuation.separator.object.ex"
              },
              {
                  "match": "\\.",
                  "name": "punctuation.separator.method.ex"
              },
              {
                  "match": "\\{|\\}",
                  "name": "punctuation.section.scope.ex"
              },
              {
                  "match": "\\[\\]|\\[|\\]",
                  "name": "punctuation.section.array.ex"
              },
              {
                  "match": ":",
                  "name": "punctuation.separator.other.ex"
              }
          ]
      },
      "string": {
          "patterns": [
              {
                  "comment": "triple quoted string (allows for interpolation)",
                  "name": "string.quoted.triple.ex",
                  "begin": "\"\"\"",
                  "end": "\"\"\"",
                  "beginCaptures": {
                      "0": {
                          "name": "punctuation.definition.string.begin.ex"
                      }
                  },
                  "endCaptures": {
                      "0": {
                          "name": "punctuation.definition.string.end.ex"
                      }
                  },
                  "patterns": [
                      {
                          "captures": {
                              "0": {
                                  "name": "punctuation.section.embedded.ex"
                              },
                              "1": {
                                  "name": "source.ex.embedded.source.empty"
                              }
                          },
                          "match": "#\\{(\\})",
                          "name": "source.ex.embedded.source"
                      },
                      {
                          "begin": "#\\{",
                          "captures": {
                              "0": {
                                  "name": "punctuation.section.embedded.ex"
                              }
                          },
                          "end": "\\}",
                          "name": "source.ex.embedded.source",
                          "patterns": [
                              {
                                  "include": "$self"
                              }
                          ]
                      },
                      {
                          "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
                          "name": "constant.character.escape.ex"
                      }
                  ]
              },
              {
                  "comment": "single quoted string (allows for interpolation)",
                  "name": "support.function.variable.quoted.single.ex",
                  "begin": "'",
                  "end": "'|\\n",
                  "beginCaptures": {
                      "0": {
                          "name": "punctuation.definition.string.begin.ex"
                      }
                  },
                  "endCaptures": {
                      "0": {
                          "name": "punctuation.definition.string.end.ex"
                      }
                  },
                  "patterns": [
                      {
                          "captures": {
                              "0": {
                                  "name": "punctuation.section.embedded.ex"
                              },
                              "1": {
                                  "name": "source.ex.embedded.source.empty"
                              }
                          },
                          "match": "#\\{(\\})",
                          "name": "source.ex.embedded.source"
                      },
                      {
                          "begin": "#\\{",
                          "captures": {
                              "0": {
                                  "name": "punctuation.section.embedded.ex"
                              }
                          },
                          "end": "\\}",
                          "name": "source.ex.embedded.source",
                          "patterns": [
                              {
                                  "include": "$self"
                              }
                          ]
                      },
                      {
                          "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
                          "name": "constant.character.escape.ex"
                      }
                  ]
              },
              {
                  "comment": "double quoted string (allows for interpolation)",
                  "name": "string.quoted.double.ex",
                  "begin": "\"",
                  "end": "\"|\\n",
                  "patterns": [
                      {
                          "captures": {
                              "0": {
                                  "name": "punctuation.section.embedded.ex"
                              },
                              "1": {
                                  "name": "source.ex.embedded.source.empty"
                              }
                          },
                          "match": "#\\{(\\})",
                          "name": "source.ex.embedded.source"
                      },
                      {
                          "begin": "#\\{",
                          "captures": {
                              "0": {
                                  "name": "punctuation.section.embedded.ex"
                              }
                          },
                          "end": "\\}",
                          "name": "source.ex.embedded.source",
                          "patterns": [
                              {
                                  "include": "$self"
                              }
                          ]
                      },
                      {
                          "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
                          "name": "constant.character.escape.ex"
                      }
                  ]
              }
          ]
      },
      "variable": {
          "patterns": [
              {
                  "begin": "\\(",
                  "end": "\\)",
                  "beginCaptures": {
                      "0": {
                          "name": "punctuation.section.function.ex"
                      }
                  },
                  "endCaptures": {
                      "0": {
                          "name": "punctuation.section.function.ex"
                      }
                  },
                  "patterns": [
                      {
                          "include": "$self"
                      },
                      {
                          "name": "variable.other.param.ex",
                          "match": "[a-zA-Z]([a-zA-Z0-9_]+)?"
                      }
                  ]
              },
              {
                  "name": "variable.other.access.ex",
                  "match": "([a-zA-Z_][a-zA-Z0-9_]+)(?=\\[)"
              },
              {
                  "name": "variable.other.readwrite.module.ex",
                  "match": "(@)[a-zA-Z_]\\w*",
                  "captures": {
                      "1": {
                          "name": "punctuation.definition.variable.ex"
                      }
                  }
              },
              {
                  "name": "variable.other.ex",
                  "match": "[a-zA-Z_]\\w+(?=:)"
              },
              {
                  "name": "variable.other.ex",
                  "match": "^\\s+\\w+\\n(?=\\s)"
              },
              {
                  "name": "variable.other.anonymous.ex",
                  "match": "(&)\\d*",
                  "captures": {
                      "1": {
                          "name": "punctuation.definition.variable.ex"
                      }
                  }
              },
              {
                  "name": "variable.language.ex",
                  "match": "\\b(__(CALLER|ENV|MODULE|DIR)__)\\b(?![?!])"
              },
              {
                  "match": "(%)?\\b([A-Z]\\w+)\\b",
                  "captures": {
                      "1": {
                          "name": "variable.other.constant.ex"
                      },
                      "2": {
                          "name": "variable.other.constant.ex"
                      }
                  }
              }
          ]
      }
  }
}